# 3. 시간 동기화 문제와 논리적 시계

## 3.1. 이중화된 데이터베이스 문제

### 분산된 데이터베이스의 병행 갱신

- 이중화된 데이터베이스의 병행 갱신 문제점 (비일관성)

| 서울 | 부산 |
| --- | --- |
| 1. 잔고 10,000원 | 1. 잔고 10,000월 |
| 2. 1,000원 입금 | 2. 1% 이자 지급 |
| 3. 잔고 11,000원으로 업데이트 | 3. 잔고 10,100원으로 업데이트 |
| 4. 부산에도 입금 정보 반영 요청 | 4. 서울에도 1% 이자 지급 요청 |
| 5. 이자 1% 지급 요청 수신 | 5.1,000원 입금 알림 수신 |
| 6. 잔고 11,110원 업데이트 | 6. 잔고 11,100원 업데이트 |

## 3.2. 시간 동기화 기법

- 분산 장치 간 시간 동기화 문제점
    - 동기화 시에도 네트워크 전송 시간이 걸림

### 크리스티안 알고리즘

- 기준 시각을 알려주는 서버가 있다는 전제하에 네트워크에서 메시지가 이동하는 시간을 고려한 기본적인 시간 동기화 기법

| 클라이언트 | 서버 |
| --- | --- |
| 1. 요청 (T1 : 요청 시각) |  |
|  | 2. 기록 (T2 : 수신 시각) |
|  | 3. 회신 (T3 : 회신 시각) |
| 4. 기록 (T4 : 수신 시각) |  |
- 작동방식
    - T4 = T3 + δresp(T3에서 클라이언트까지 도달하는 데 걸린 시간)
    - δresp는 δreq(T1에서 서버까지 도달하는 데 걸린 시간)과 유사하다고 추정
    - δresp + δreq = (T4 - T1) - (T3 - T2)
    - δresp와 δreq가 거의 동일하다고 할 때 왕복시간을 δ로 정의
    - 클라이언트가 서버로 부터 수신한 시각 T4 = T3 + δ / 2
- 단점
    - δresp와 δreq가 거의 동일하다는 전제가 정확하지 않음
    - 서버 중단 시 시간 동기화 불가능

### 버클리 알고리즘

- 별도의 기준 시각을 제공하는 장치(시계)가 없고 분산 장치들 간 시각 정확도가 비슷한 장치(시계)가 네트워크에 연결된 경우 장치간의 평균 시각 활용
- 작동방식 : 시각을 취합할 역할을 하는 마스터 장치가 자신을 포함하여 시간차를 확인
    - 세 장치간 평균시각 : 3:05
    - 마스터 장치가 자신을 포함하여 다른 장치에게 평균 시각에 맞추기 위한 조정 시간을 알려줌

|  | 마스터 장치 A | 장치 B | 장치 C |
| --- | --- | --- | --- |
| 각자 시각 | 3:00 | 2:50 | 3:25 |
| 마스터와의 차이 | 0 | -10 | +25 |
| 평균 시각 조정 시간 | +5 | +15 | -20 |
- 문제점
    - 네트워크 소요 시간을 정확하게 반영하지 못함
    - 어떤 장치를 마스터 장치로 선정할 것인가?

### 네트워크 시간 프로토콜

- NTP(Network Time Protocol)
- 자동방식
    - 정확한 시간을 필요로 하는 장치들과 기준 시각 제공 서버가 계층(Stratum)을 형성
    - 일반 분산 장치들은 Stratum 3의 NTP서버들과 연결됨 (크리스티안 알고리즘 사용)
    - 각 클라이언트는 상위 계층의 모든 NTP 서버에서 K번 조정된 시각 t 값을 수신
    
    | Stratum 0 | 가장 정확한 시각을 제공하는 라디오 방속국 또는 인공위성 |
    | --- | --- |
    | Stratum 1 | Stratum 0에 직접 연결된 NTP 서버들 |
    | Stratum 2 | Stratum 1에 연결된 NTP 서버들. 크리스티안 알고리즘 처럼 클라이언트 역할 |
    | Stratum 3 | Stratum 2에 연결된 NTP 서버들. 기준 시각을 요청하는 클라이언트 역할 |

## 3.3. 논리적 시계

- 분산된 장치들의 시계는 완벽하게 동기화 되지 않음
- 나노초 단위의 정확한 시각을 보장하지 못함
- 이중화된 데이터베이스에서는 절대적인 시각 보다는 작업 순서가 중요

### 램포트 시계

- 정확한 절대 시각은 무시. 분산된 장치들 간에 작업의 선후 관계를 규정함
- 이벤트 a, b
    - a가 b보다 선행이면 (a→b)로 표현
    - a와 b 사이의 시간 관계가 명확하지 않은 경우 (a || b)로 표현
    - 모든 이벤트의 논리적 시각 제공
- 어떤 이벤트를 x라고 표현 할 때, 램포트 시계가 부여한 시각을 C(x)로 표기
    - 두 이벤트 a, b가 있을 때 (a→b) 관계가 참이면 C(a) < C(b)임

### 이벤트의 전체 순서

- 알고리즘
    - 모든 장치 i는 자체 램포트 시계 Ci를 보유. 장치가 시작함면서 Ci = 0으로 초기화 (램포트 시각은 정수값)
    - 각 이벤트가 실행되기 전에 램포트 시계를 현재의 램포트 시각에서 1증가시킴
        - Ci ← Ci + 1
    - 이벤트가 실행되면 새롭게 1을 증가한 램포트 시각에서 발생했다고 표시함
    - Ci가 Cj에게 메시지(m)을 보내는 경우, m에 메시지를 보낸 시점의 램포트 시각을 함께 첨부하여 전송함
    - Ci는 m에 포함된 램포트 시각 C(m)을 자신의 현재 램포트 시각과 비교하고 그 중에서 더 큰 램포트 시각에 1을 더한 시각을 m을 수신한 이벤트의 램포트 시각으로 정함
    - 같은 램포트 시각을 갖는 두 이벤트 간의 시간 관계를 정하기 위해서
        - 램포트 시각에 장치를 고유하게 식별하는 정수 아이디 값 추가
            - Ci(a).i < Cj(b).j 라고 할 수 있는 경우
                - C(a) < C(b) or C(a)=C(b), i < j

## 3.4. 램포트 시계를 활용한 비일관성 문제 해결

- 분산 환경에서 발생한 이벤트들 간의 전체적인 순서를 결정할 수 있음
- 각 지점은 다른 노드에서 수행해야 할 작업을 적어둔 메시지에 램포트 시각을 첨부하여 전송
- 각 지점은 타 노드에서 전송하는 메시지를 담는 큐를 가지고 있음
- 큐는 수신 메시지에 포함된 램포트 시각을 기준으로 메시지를 정렬

### 데이터베이스 복제 알고리즘

- 알고리즘
    - 데이터베이스를 업데이트할 작업이 발생하면, 해당 작업을 자신과 다른 지점에 메시지로 통지
    - 해당 메시지를 수신하면
        - 해당 작업을 큐에 저장
        - 수신 확인 메시지를 전송. 다만, 해당 업데이트 작업이 큐의 가장 앞에 있는 경우에만 회신
    - 업데이트 할 일에 대한 수신 확인 메시지를 받으면, 해당 작업이 다른 지점에서도 확인되었음을 표시
    - 확인된 작업은 큐에서 가장 첫 번째 자리에서 제거하고 해당 작업 수행

### 분산 데이터베이스 병행 갱신 문제 해결

- 안정성 보장 및 일관된 작업 수행 가능함
- 성능과 관련된 문제나 메시지 유실, 지점 서버 중단 등 장애 상황에 대한 고려 필요
- 메시지 변조와 같은 보안 측면도 고려되어야 함

## 핵심요약

- 분산 컴퓨팅에 참여하는 프로세스들 간에 시간 동기화되어 있음. 즉 주어진 순간 모든 프로세스들의 시각이 일치하는 것이 전제되어야 하는 경우들이 많음
- 시간 동기화를 위한 알고리즘이 존재하지만 완전한 시간 동기화는 어려움
    - 크리스티안 알고리즘, 버클리 알고리즘, NTP
- 분산 프로세스들의 시계를 동기화 하는 것 보다는 프로세스들에서 발생하는 이벤트들 간의 순서 관계를 논리적으로 표현하여 데이터베이스 복제 시 비일관성 문제를 해결 할 수 있음
- 램포트 시계는 분산 프로세스들에서 발생한 이벤트들의 순서 관계를 표현함
- 램포트 시계를 통해서 분산 프로세스들의 발생 이벤트들의 순서가 정렬된 것은 ‘전체 순서’라고 함. 램포트 시계에 의한 순서 관계가 인과관계를 의미하는 것은 아님
